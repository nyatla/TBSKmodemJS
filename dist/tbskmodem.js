/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n\n\n//# sourceURL=webpack://tbskmodem-js/./node_modules/base64-js/index.js?");

/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n\n\nvar base64 = __webpack_require__(/*! base64-js */ \"./node_modules/base64-js/index.js\")\nvar ieee754 = __webpack_require__(/*! ieee754 */ \"./node_modules/ieee754/index.js\")\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    var copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        Buffer.from(buf).copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (var i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n\n//# sourceURL=webpack://tbskmodem-js/./node_modules/buffer/index.js?");

/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n\n\n//# sourceURL=webpack://tbskmodem-js/./node_modules/ieee754/index.js?");

/***/ }),

/***/ "./src/audiocapture1.js":
/*!******************************!*\
  !*** ./src/audiocapture1.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AudioCapture1\": () => (/* binding */ AudioCapture1)\n/* harmony export */ });\nclass AudioCapture1 {\r\n    constructor(sample_rate) {\r\n        var _t = this;\r\n        //see https://github.com/mdn/dom-examples/blob/main/media/web-dictaphone/scripts/app.js\r\n        if (!navigator.mediaDevices.getUserMedia) {\r\n            throw new Error('getUserMedia not supported on your browser!');\r\n        }\r\n        _t._actx = new (window.AudioContext || window.webkitAudioContext)({ sampleRate: sample_rate });\r\n        _t._sample_rate = sample_rate;\r\n        _t._media_devices = navigator.mediaDevices;\r\n        _t._media_stream = null;\r\n        _t._nodes = null;\r\n        _t._onsound = null;\r\n    }\r\n    enumerateDevices() {\r\n        const constraints = {\r\n            audio: true,\r\n            video: false\r\n        };\r\n        navigator.mediaDevices.enumerateDevices()\r\n            .then(function (devices) {\r\n                devices.forEach(function (device) {\r\n                    console.log(device.kind + \": \" + device.label +\r\n                        \" id = \" + device.deviceId);\r\n                });\r\n            })\r\n            .catch(function (err) {\r\n                console.log(err.name + \": \" + err.message);\r\n            });\r\n    }\r\n\r\n    open() {\r\n        var _t = this;\r\n        let dev = this._media_devices;\r\n        let actx = this._actx;\r\n\r\n        const constraints = {\r\n            audio: {\r\n                autoGainControl: { ideal: false },\r\n                echoCancellation: { ideal: false },\r\n                sampleRate: { ideal: _t._sample_rate },\r\n                sampleSize: { ideal: 16 },\r\n                channelCount: { ideal: 1 },\r\n                noiseSuppression:{ideal:false}\r\n            },\r\n            video: false\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            dev.getUserMedia(constraints).then(\r\n                function (stream) {   //onSuccess\r\n                    _t._media_stream = stream;\r\n                    let media_src_node = actx.createMediaStreamSource(stream);\r\n                    //https://weblike-curtaincall.ssl-lolipop.jp/portfolio-web-sounder/webaudioapi-basic/custom\r\n                    var getBufferSize = function() {\r\n                        if (/(Win(dows )?NT 6\\.2)/.test(navigator.userAgent)) {\r\n                            return 1024;  // Windows 8\r\n                        } else if (/(Win(dows )?NT 6\\.1)/.test(navigator.userAgent)) {\r\n                            return 1024;  // Windows 7\r\n                        } else if (/(Win(dows )?NT 6\\.0)/.test(navigator.userAgent)) {\r\n                            return 2048;  // Windows Vista\r\n                        } else if (/Win(dows )?(NT 5\\.1|XP)/.test(navigator.userAgent)) {\r\n                            return 4096;  // Windows XP\r\n                        } else if (/Mac|PPC/.test(navigator.userAgent)) {\r\n                            return 1024;  // Mac OS X\r\n                        } else if (/Linux/.test(navigator.userAgent)) {\r\n                            return 8192;  // Linux\r\n                        } else if (/iPhone|iPad|iPod/.test(navigator.userAgent)) {\r\n                            return 2048;  // iOS\r\n                        } else {\r\n                            return 16384;  // Otherwise\r\n                        }\r\n                    };                    \r\n                    let handler_node = actx.createScriptProcessor(getBufferSize(), 1, 1);\r\n                    media_src_node.connect(handler_node);\r\n                    handler_node.connect(actx.destination);\r\n                    handler_node.addEventListener(\"audioprocess\",\r\n                        (event) => {\r\n                            console.log(\"in\");\r\n                            if (!_t._onsound) {\r\n                                return;\r\n                            }\r\n                            new Promise((resolve)=>{\r\n                                resolve(event);\r\n\r\n                            }).then((e)=>{_t._onsound(e.inputBuffer.getChannelData(0))});\r\n                        }\r\n                    );\r\n\r\n                    _t._nodes = { media_src: media_src_node, handler: handler_node };\r\n                    console.log(\"connected\");\r\n                    resolve();\r\n                },\r\n                function (err) {   //onError\r\n                    console.log('The following error occured: ' + err);\r\n                    reject();\r\n                });\r\n        })\r\n    }\r\n    close() {\r\n        this.stop();\r\n        if (this._nodes) {\r\n            this._nodes.handler.disconnect();\r\n            this._nodes.media_src.disconnect();\r\n        }\r\n        this._nodes = null;\r\n        this._actx.close();\r\n        this._actx = null;\r\n    }\r\n    capability() {\r\n        //see https://note.com/npaka/n/n87acd80a4266\r\n        let tracks = this._media_stream.getTracks();\r\n        for (var i = 0; i < tracks.length; i++) {\r\n            console.log(tracks[i]);\r\n            console.log(tracks[i].getSettings());\r\n        }\r\n    }\r\n    start(onsound) {\r\n        if (!this._actx || this._onsound) { throw new Error(); }\r\n        this._onsound = onsound;\r\n        console.log(\"recorder started\");\r\n    }\r\n    stop() {\r\n        if (!this._actx) { throw new Error(); }\r\n        assert(this._actx);\r\n        this._onsound = null;\r\n        console.log(\"recorder stopped\");\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://tbskmodem-js/./src/audiocapture1.js?");

/***/ }),

/***/ "./src/audiocapture2.js":
/*!******************************!*\
  !*** ./src/audiocapture2.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AudioCapture2\": () => (/* binding */ AudioCapture2)\n/* harmony export */ });\n/**\r\n * AudioWorkletNodeを使ったAudioキャプチャ\r\n */\r\n\r\n\r\n//dumpprocessssor.jsの中身\r\nconst ww_script=new Blob([\r\n`\r\nclass DumpProcessor extends AudioWorkletProcessor\r\n{\r\n    constructor(){\r\n        super();\r\n        console.log(\"DumpProcessor ready!\");\r\n        this._q=[];\r\n        this.port.onmessage = (e) => {\r\n            switch(e.data){\r\n            case \"start\":\r\n                this._q=[];\r\n                break;\r\n            case \"stop\":\r\n                this._q=undefined;\r\n                break;\r\n            case \"clear\":\r\n                this._q=this._q?[]:this._q;\r\n                break;\r\n            default:\r\n                console.log(\"Invalid message:\"+e.data); \r\n            }\r\n            console.log(e.data);\r\n          };\r\n    }\r\n    process(inputs, outputs, parameters){\r\n        let _t=this;\r\n        if(!_t){\r\n            return true;\r\n        }\r\n        for(let i=0;i<inputs.length;i++){\r\n            _t._q.push(inputs[i][0]);//ch1のみ\r\n        }\r\n        if(_t._q.length>1000){\r\n            console.log(\"Buffer overflow.\");\r\n        }\r\n        function f(){\r\n            let proc=new Promise((resolve) => {\r\n                _t.port.postMessage({name:\"data\",value:_t._q.shift()});\r\n                resolve();\r\n            });            \r\n            proc.then(()=>{if(_t._q.length>0){f();}});\r\n        }\r\n        f();\r\n        return true;\r\n    }\r\n  }\r\n  \r\n  registerProcessor(\"dump-processor\", DumpProcessor);\r\n\r\n`], {type: 'text/javascript'});\r\n\r\nclass AudioCapture2\r\n{\r\n    constructor(sample_rate) {\r\n        var _t = this;\r\n        //see https://github.com/mdn/dom-examples/blob/main/media/web-dictaphone/scripts/app.js\r\n        if (!navigator.mediaDevices.getUserMedia) {\r\n            throw new Error('getUserMedia not supported on your browser!');\r\n        }\r\n        _t._actx = new (window.AudioContext || window.webkitAudioContext)({ sampleRate: sample_rate });\r\n        _t._sample_rate = sample_rate;\r\n        _t._media_devices = navigator.mediaDevices;\r\n        _t._media_stream = null;\r\n        _t._nodes = null;\r\n        _t._onsound = null;\r\n    }\r\n    enumerateDevices() {\r\n        const constraints = {\r\n            audio: true,\r\n            video: false\r\n        };\r\n        navigator.mediaDevices.enumerateDevices()\r\n            .then(function (devices) {\r\n                devices.forEach(function (device) {\r\n                    console.log(device.kind + \": \" + device.label +\r\n                        \" id = \" + device.deviceId);\r\n                });\r\n            })\r\n            .catch(function (err) {\r\n                console.log(err.name + \": \" + err.message);\r\n            });\r\n    }\r\n\r\n    open() {\r\n        var _t = this;\r\n        let dev = this._media_devices;\r\n        let actx = this._actx;\r\n\r\n        const constraints = {\r\n            audio: {\r\n                autoGainControl: { ideal: false },\r\n                echoCancellation: { ideal: false },\r\n                noiseSuppression:{ideal:false},\r\n                sampleRate: { ideal: _t._sample_rate },\r\n                sampleSize: { ideal: 16 },\r\n                channelCount: { ideal: 1 }\r\n            },\r\n            video: false\r\n        };\r\n        return new Promise((resolve, reject) => {\r\n            dev.getUserMedia(constraints).then(\r\n                function (stream) {   //onSuccess\r\n                    _t._media_stream = stream;\r\n                    let media_src_node = actx.createMediaStreamSource(stream);\r\n                    actx.audioWorklet.addModule(URL.createObjectURL(ww_script)).then(() => {\r\n//                    actx.audioWorklet.addModule('dumpprocessor.js').then(() => {\r\n                        let handler_node = new AudioWorkletNode(actx, 'dump-processor');\r\n                        handler_node.port.onmessage = (event) => {\r\n                            if(event.data.name){\r\n                                if (_t._onsound) {\r\n                                    _t._onsound(event.data.value);\r\n                                }\r\n                            }\r\n                        };\r\n                        media_src_node.connect(handler_node);\r\n                        handler_node.connect(actx.destination);\r\n\r\n                        _t._nodes = { media_src: media_src_node, handler: handler_node };\r\n                        console.log(\"connected\");\r\n                        resolve();\r\n    \r\n                    });\r\n                },\r\n                function (err) {   //onError\r\n                    console.log('The following error occured: ' + err);\r\n                    reject();\r\n                }\r\n            );\r\n        })\r\n    }\r\n    close() {\r\n        this.stop();\r\n        if (this._nodes) {\r\n            this._nodes.handler.disconnect();\r\n            this._nodes.media_src.disconnect();\r\n        }\r\n        this._nodes = null;\r\n        this._actx.close();\r\n        this._actx = null;\r\n    }\r\n    capability() {\r\n        //see https://note.com/npaka/n/n87acd80a4266\r\n        let tracks = this._media_stream.getTracks();\r\n        for (var i = 0; i < tracks.length; i++) {\r\n            console.log(tracks[i]);\r\n            console.log(tracks[i].getSettings());\r\n        }\r\n    }\r\n    start(onsound) {\r\n        if (!this._actx || this._onsound) { throw new Error(); }\r\n        this._onsound = onsound;\r\n        console.log(\"recorder started\");\r\n    }\r\n    stop() {\r\n        if (!this._actx) { throw new Error(); }\r\n        assert(this._actx);\r\n        this._onsound = null;\r\n        console.log(\"recorder stopped\");\r\n    }\r\n}\r\n\n\n//# sourceURL=webpack://tbskmodem-js/./src/audiocapture2.js?");

/***/ }),

/***/ "./src/libtbskmodem.js":
/*!*****************************!*\
  !*** ./src/libtbskmodem.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"TBSKmodemJS\": () => (/* binding */ TBSKmodemJS)\n/* harmony export */ });\n/* harmony import */ var _wasm_tbskmodem_wasm_mod_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wasm/tbskmodem_wasm_mod.wasm */ \"./src/wasm/tbskmodem_wasm_mod.wasm\");\n/* harmony import */ var _audiocapture2_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./audiocapture2.js */ \"./src/audiocapture2.js\");\n/* harmony import */ var _audiocapture1_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./audiocapture1.js */ \"./src/audiocapture1.js\");\n/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! buffer */ \"./node_modules/buffer/index.js\");\n\n\n\n\n\n/**\n * ref::\n * https://zenn.dev/wok/articles/0022_bundle-wasm\n */\nconst VERSION=\"TBSKmodemJS/0.1.0\";\n\nconst TBSKmodemJS={\n    _instance:null,\n    load:async ()=>\n    {\n        if(TBSKmodemJS._instance){\n            console.log(\"TBSKmodemJS is already created.\");\n            return TBSKmodemJS;\n        }\n        const mod = __webpack_require__(/*! ./wasm/tbskmodem_wasm_mod.js */ \"./src/wasm/tbskmodem_wasm_mod.js\");\n        const b = buffer__WEBPACK_IMPORTED_MODULE_3__.Buffer.from(_wasm_tbskmodem_wasm_mod_wasm__WEBPACK_IMPORTED_MODULE_0__.split(\",\")[1], \"base64\");\n        let wasm = await mod({ wasmBinary: b });\n        wasm._load_apis();\n        TBSKmodemJS.wasm=wasm;\n        TBSKmodemJS.version=VERSION+\";TBSKmodem/\"+wasm._wasm_tbskmodem_VERSION(0)+\".\"+wasm._wasm_tbskmodem_VERSION(1)+\".\"+wasm._wasm_tbskmodem_VERSION(2);\n        TBSKmodemJS.wasm=wasm;\n        TBSKmodemJS.audio={\n            AudioCapture:_audiocapture2_js__WEBPACK_IMPORTED_MODULE_1__.AudioCapture2,\n            capture1:_audiocapture1_js__WEBPACK_IMPORTED_MODULE_2__.AudioCapture1,\n            capture2:_audiocapture2_js__WEBPACK_IMPORTED_MODULE_1__.AudioCapture2,            \n        };\n        for(let i in wasm.tbskmodem){\n            TBSKmodemJS[i]=wasm.tbskmodem[i];\n        }\n        return TBSKmodemJS;\n    }};\n\n\n//# sourceURL=webpack://tbskmodem-js/./src/libtbskmodem.js?");

/***/ }),

/***/ "./src/tbskmodem.js":
/*!**************************!*\
  !*** ./src/tbskmodem.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _libtbskmodem_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./libtbskmodem.js */ \"./src/libtbskmodem.js\");\n//スタンドアロン版\n\n\n//頭の悪いエクスポート。\nwindow.TBSKmodemJS=_libtbskmodem_js__WEBPACK_IMPORTED_MODULE_0__.TBSKmodemJS;\n\n//# sourceURL=webpack://tbskmodem-js/./src/tbskmodem.js?");

/***/ }),

/***/ "./src/wasm/tbskmodem_wasm_mod.js":
/*!****************************************!*\
  !*** ./src/wasm/tbskmodem_wasm_mod.js ***!
  \****************************************/
/***/ ((module) => {

eval("\nvar Module = (() => {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  \n  return (\nfunction(Module) {\n  Module = Module || {};\n\nvar Module = typeof Module != \"undefined\" ? Module : {};\n\nvar readyPromiseResolve, readyPromiseReject;\n\nModule[\"ready\"] = new Promise(function(resolve, reject) {\n readyPromiseResolve = resolve;\n readyPromiseReject = reject;\n});\n\nvar moduleOverrides = Object.assign({}, Module);\n\nvar arguments_ = [];\n\nvar thisProgram = \"./this.program\";\n\nvar quit_ = (status, toThrow) => {\n throw toThrow;\n};\n\nvar ENVIRONMENT_IS_WEB = true;\n\nvar ENVIRONMENT_IS_WORKER = false;\n\nvar scriptDirectory = \"\";\n\nfunction locateFile(path) {\n if (Module[\"locateFile\"]) {\n  return Module[\"locateFile\"](path, scriptDirectory);\n }\n return scriptDirectory + path;\n}\n\nvar read_, readAsync, readBinary, setWindowTitle;\n\nif (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n if (ENVIRONMENT_IS_WORKER) {\n  scriptDirectory = self.location.href;\n } else if (typeof document != \"undefined\" && document.currentScript) {\n  scriptDirectory = document.currentScript.src;\n }\n if (_scriptDir) {\n  scriptDirectory = _scriptDir;\n }\n if (scriptDirectory.indexOf(\"blob:\") !== 0) {\n  scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, \"\").lastIndexOf(\"/\") + 1);\n } else {\n  scriptDirectory = \"\";\n }\n {\n  read_ = url => {\n   var xhr = new XMLHttpRequest();\n   xhr.open(\"GET\", url, false);\n   xhr.send(null);\n   return xhr.responseText;\n  };\n  if (ENVIRONMENT_IS_WORKER) {\n   readBinary = url => {\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, false);\n    xhr.responseType = \"arraybuffer\";\n    xhr.send(null);\n    return new Uint8Array(xhr.response);\n   };\n  }\n  readAsync = (url, onload, onerror) => {\n   var xhr = new XMLHttpRequest();\n   xhr.open(\"GET\", url, true);\n   xhr.responseType = \"arraybuffer\";\n   xhr.onload = () => {\n    if (xhr.status == 200 || xhr.status == 0 && xhr.response) {\n     onload(xhr.response);\n     return;\n    }\n    onerror();\n   };\n   xhr.onerror = onerror;\n   xhr.send(null);\n  };\n }\n setWindowTitle = title => document.title = title;\n} else {}\n\nvar out = Module[\"print\"] || console.log.bind(console);\n\nvar err = Module[\"printErr\"] || console.warn.bind(console);\n\nObject.assign(Module, moduleOverrides);\n\nmoduleOverrides = null;\n\nif (Module[\"arguments\"]) arguments_ = Module[\"arguments\"];\n\nif (Module[\"thisProgram\"]) thisProgram = Module[\"thisProgram\"];\n\nif (Module[\"quit\"]) quit_ = Module[\"quit\"];\n\nvar POINTER_SIZE = 4;\n\nvar wasmBinary;\n\nif (Module[\"wasmBinary\"]) wasmBinary = Module[\"wasmBinary\"];\n\nvar noExitRuntime = Module[\"noExitRuntime\"] || true;\n\nif (typeof WebAssembly != \"object\") {\n abort(\"no native wasm support detected\");\n}\n\nvar wasmMemory;\n\nvar ABORT = false;\n\nvar EXITSTATUS;\n\nfunction assert(condition, text) {\n if (!condition) {\n  abort(text);\n }\n}\n\nvar UTF8Decoder = typeof TextDecoder != \"undefined\" ? new TextDecoder(\"utf8\") : undefined;\n\nfunction UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {\n var endIdx = idx + maxBytesToRead;\n var endPtr = idx;\n while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;\n if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {\n  return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));\n }\n var str = \"\";\n while (idx < endPtr) {\n  var u0 = heapOrArray[idx++];\n  if (!(u0 & 128)) {\n   str += String.fromCharCode(u0);\n   continue;\n  }\n  var u1 = heapOrArray[idx++] & 63;\n  if ((u0 & 224) == 192) {\n   str += String.fromCharCode((u0 & 31) << 6 | u1);\n   continue;\n  }\n  var u2 = heapOrArray[idx++] & 63;\n  if ((u0 & 240) == 224) {\n   u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n  } else {\n   u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;\n  }\n  if (u0 < 65536) {\n   str += String.fromCharCode(u0);\n  } else {\n   var ch = u0 - 65536;\n   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);\n  }\n }\n return str;\n}\n\nfunction UTF8ToString(ptr, maxBytesToRead) {\n return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : \"\";\n}\n\nfunction stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {\n if (!(maxBytesToWrite > 0)) return 0;\n var startIdx = outIdx;\n var endIdx = outIdx + maxBytesToWrite - 1;\n for (var i = 0; i < str.length; ++i) {\n  var u = str.charCodeAt(i);\n  if (u >= 55296 && u <= 57343) {\n   var u1 = str.charCodeAt(++i);\n   u = 65536 + ((u & 1023) << 10) | u1 & 1023;\n  }\n  if (u <= 127) {\n   if (outIdx >= endIdx) break;\n   heap[outIdx++] = u;\n  } else if (u <= 2047) {\n   if (outIdx + 1 >= endIdx) break;\n   heap[outIdx++] = 192 | u >> 6;\n   heap[outIdx++] = 128 | u & 63;\n  } else if (u <= 65535) {\n   if (outIdx + 2 >= endIdx) break;\n   heap[outIdx++] = 224 | u >> 12;\n   heap[outIdx++] = 128 | u >> 6 & 63;\n   heap[outIdx++] = 128 | u & 63;\n  } else {\n   if (outIdx + 3 >= endIdx) break;\n   heap[outIdx++] = 240 | u >> 18;\n   heap[outIdx++] = 128 | u >> 12 & 63;\n   heap[outIdx++] = 128 | u >> 6 & 63;\n   heap[outIdx++] = 128 | u & 63;\n  }\n }\n heap[outIdx] = 0;\n return outIdx - startIdx;\n}\n\nvar buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;\n\nfunction updateGlobalBufferAndViews(buf) {\n buffer = buf;\n Module[\"HEAP8\"] = HEAP8 = new Int8Array(buf);\n Module[\"HEAP16\"] = HEAP16 = new Int16Array(buf);\n Module[\"HEAP32\"] = HEAP32 = new Int32Array(buf);\n Module[\"HEAPU8\"] = HEAPU8 = new Uint8Array(buf);\n Module[\"HEAPU16\"] = HEAPU16 = new Uint16Array(buf);\n Module[\"HEAPU32\"] = HEAPU32 = new Uint32Array(buf);\n Module[\"HEAPF32\"] = HEAPF32 = new Float32Array(buf);\n Module[\"HEAPF64\"] = HEAPF64 = new Float64Array(buf);\n}\n\nvar INITIAL_MEMORY = Module[\"INITIAL_MEMORY\"] || 16777216;\n\nvar wasmTable;\n\nvar __ATPRERUN__ = [];\n\nvar __ATINIT__ = [];\n\nvar __ATPOSTRUN__ = [];\n\nvar runtimeInitialized = false;\n\nfunction preRun() {\n if (Module[\"preRun\"]) {\n  if (typeof Module[\"preRun\"] == \"function\") Module[\"preRun\"] = [ Module[\"preRun\"] ];\n  while (Module[\"preRun\"].length) {\n   addOnPreRun(Module[\"preRun\"].shift());\n  }\n }\n callRuntimeCallbacks(__ATPRERUN__);\n}\n\nfunction initRuntime() {\n runtimeInitialized = true;\n callRuntimeCallbacks(__ATINIT__);\n}\n\nfunction postRun() {\n if (Module[\"postRun\"]) {\n  if (typeof Module[\"postRun\"] == \"function\") Module[\"postRun\"] = [ Module[\"postRun\"] ];\n  while (Module[\"postRun\"].length) {\n   addOnPostRun(Module[\"postRun\"].shift());\n  }\n }\n callRuntimeCallbacks(__ATPOSTRUN__);\n}\n\nfunction addOnPreRun(cb) {\n __ATPRERUN__.unshift(cb);\n}\n\nfunction addOnInit(cb) {\n __ATINIT__.unshift(cb);\n}\n\nfunction addOnPostRun(cb) {\n __ATPOSTRUN__.unshift(cb);\n}\n\nvar runDependencies = 0;\n\nvar runDependencyWatcher = null;\n\nvar dependenciesFulfilled = null;\n\nfunction addRunDependency(id) {\n runDependencies++;\n if (Module[\"monitorRunDependencies\"]) {\n  Module[\"monitorRunDependencies\"](runDependencies);\n }\n}\n\nfunction removeRunDependency(id) {\n runDependencies--;\n if (Module[\"monitorRunDependencies\"]) {\n  Module[\"monitorRunDependencies\"](runDependencies);\n }\n if (runDependencies == 0) {\n  if (runDependencyWatcher !== null) {\n   clearInterval(runDependencyWatcher);\n   runDependencyWatcher = null;\n  }\n  if (dependenciesFulfilled) {\n   var callback = dependenciesFulfilled;\n   dependenciesFulfilled = null;\n   callback();\n  }\n }\n}\n\nfunction abort(what) {\n if (Module[\"onAbort\"]) {\n  Module[\"onAbort\"](what);\n }\n what = \"Aborted(\" + what + \")\";\n err(what);\n ABORT = true;\n EXITSTATUS = 1;\n what += \". Build with -sASSERTIONS for more info.\";\n ___trap();\n}\n\nvar dataURIPrefix = \"data:application/octet-stream;base64,\";\n\nfunction isDataURI(filename) {\n return filename.startsWith(dataURIPrefix);\n}\n\nvar wasmBinaryFile;\n\nwasmBinaryFile = \"tbskmodem_wasm_mod.wasm\";\n\nif (!isDataURI(wasmBinaryFile)) {\n wasmBinaryFile = locateFile(wasmBinaryFile);\n}\n\nfunction getBinary(file) {\n try {\n  if (file == wasmBinaryFile && wasmBinary) {\n   return new Uint8Array(wasmBinary);\n  }\n  if (readBinary) {\n   return readBinary(file);\n  }\n  throw \"both async and sync fetching of the wasm failed\";\n } catch (err) {\n  abort(err);\n }\n}\n\nfunction getBinaryPromise() {\n if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {\n  if (typeof fetch == \"function\") {\n   return fetch(wasmBinaryFile, {\n    credentials: \"same-origin\"\n   }).then(function(response) {\n    if (!response[\"ok\"]) {\n     throw \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\";\n    }\n    return response[\"arrayBuffer\"]();\n   }).catch(function() {\n    return getBinary(wasmBinaryFile);\n   });\n  }\n }\n return Promise.resolve().then(function() {\n  return getBinary(wasmBinaryFile);\n });\n}\n\nfunction createWasm() {\n var info = {\n  \"env\": asmLibraryArg,\n  \"wasi_snapshot_preview1\": asmLibraryArg\n };\n function receiveInstance(instance, module) {\n  var exports = instance.exports;\n  Module[\"asm\"] = exports;\n  wasmMemory = Module[\"asm\"][\"memory\"];\n  updateGlobalBufferAndViews(wasmMemory.buffer);\n  wasmTable = Module[\"asm\"][\"__indirect_function_table\"];\n  addOnInit(Module[\"asm\"][\"__wasm_call_ctors\"]);\n  removeRunDependency(\"wasm-instantiate\");\n }\n addRunDependency(\"wasm-instantiate\");\n function receiveInstantiationResult(result) {\n  receiveInstance(result[\"instance\"]);\n }\n function instantiateArrayBuffer(receiver) {\n  return getBinaryPromise().then(function(binary) {\n   return WebAssembly.instantiate(binary, info);\n  }).then(function(instance) {\n   return instance;\n  }).then(receiver, function(reason) {\n   err(\"failed to asynchronously prepare wasm: \" + reason);\n   abort(reason);\n  });\n }\n function instantiateAsync() {\n  if (!wasmBinary && typeof WebAssembly.instantiateStreaming == \"function\" && !isDataURI(wasmBinaryFile) && typeof fetch == \"function\") {\n   return fetch(wasmBinaryFile, {\n    credentials: \"same-origin\"\n   }).then(function(response) {\n    var result = WebAssembly.instantiateStreaming(response, info);\n    return result.then(receiveInstantiationResult, function(reason) {\n     err(\"wasm streaming compile failed: \" + reason);\n     err(\"falling back to ArrayBuffer instantiation\");\n     return instantiateArrayBuffer(receiveInstantiationResult);\n    });\n   });\n  } else {\n   return instantiateArrayBuffer(receiveInstantiationResult);\n  }\n }\n if (Module[\"instantiateWasm\"]) {\n  try {\n   var exports = Module[\"instantiateWasm\"](info, receiveInstance);\n   return exports;\n  } catch (e) {\n   err(\"Module.instantiateWasm callback failed with error: \" + e);\n   readyPromiseReject(e);\n  }\n }\n instantiateAsync().catch(readyPromiseReject);\n return {};\n}\n\nvar tempDouble;\n\nvar tempI64;\n\nfunction callRuntimeCallbacks(callbacks) {\n while (callbacks.length > 0) {\n  callbacks.shift()(Module);\n }\n}\n\nfunction _TBSKmodem_api_load_() {\n let MOD = Module;\n if (\"tbskmodem\" in MOD) {\n  console.log(\"tbskmodem api is already initialized.\");\n  return;\n }\n console.log(\"Start tbskmodem initialize.\");\n function set_default(a, v) {\n  return a === undefined || a === null ? v : a;\n }\n class Disposable {\n  dispose() {}\n }\n class WasmProxy extends Disposable {\n  constructor(wasm_instance) {\n   super();\n   this._wasm_instance = wasm_instance;\n  }\n  dispose() {\n   MOD._wasm_tbskmodem_Dispose(this._wasm_instance);\n   this._wasm_instance = null;\n   super.dispose();\n  }\n }\n class IntInputIterator extends WasmProxy {\n  constructor() {\n   super(MOD._wasm_tbskmodem_IntInputIterator());\n  }\n  put(v) {\n   MOD._wasm_tbskmodem_IntInputIterator_put(this._wasm_instance, v);\n   return this;\n  }\n  puts(v) {\n   for (var i = 0; i < v.length; i++) {\n    this.put(v[i] & 255);\n   }\n   return this;\n  }\n }\n class DoubleInputIterator extends WasmProxy {\n  constructor(is_recoverable = false) {\n   super(MOD._wasm_tbskmodem_DoubleInputIterator(is_recoverable));\n  }\n  put(v) {\n   MOD._wasm_tbskmodem_DoubleInputIterator_put(this._wasm_instance, v);\n   return this;\n  }\n  puts(v) {\n   for (var i = 0; i < v.length; i++) {\n    this.put(v[i]);\n   }\n   return this;\n  }\n }\n class BasicOutputIterator extends WasmProxy {\n  constructor(wasm_instance) {\n   super(wasm_instance);\n  }\n  toArray() {\n   let r = [];\n   try {\n    for (;;) {\n     r.push(this.next());\n    }\n   } catch (e) {\n    if (e instanceof StopIteration) {} else {\n     console.log(e);\n     throw e;\n    }\n   }\n   return r;\n  }\n }\n class DoubleOutputIterator extends BasicOutputIterator {\n  constructor(wasm_instance) {\n   super(wasm_instance);\n  }\n  next() {\n   let s = MOD._wasm_tbskmodem_DoubleOutputIterator_hasNext(this._wasm_instance);\n   switch (s) {\n   case 0:\n    return MOD._wasm_tbskmodem_DoubleOutputIterator_lastNext(this._wasm_instance);\n\n   case 1:\n    throw new RecoverableStopIteration();\n\n   case 2:\n    throw new StopIteration();\n\n   default:\n    throw new Error();\n   }\n  }\n }\n class IntOutputIterator extends BasicOutputIterator {\n  constructor(wasm_instance) {\n   super(wasm_instance);\n  }\n  next() {\n   let s = MOD._wasm_tbskmodem_IntOutputIterator_hasNext(this._wasm_instance);\n   switch (s) {\n   case 0:\n    return MOD._wasm_tbskmodem_IntOutputIterator_lastNext(this._wasm_instance);\n\n   case 1:\n    throw new RecoverableStopIteration();\n\n   case 2:\n    throw new StopIteration();\n\n   default:\n    throw new Error();\n   }\n  }\n }\n class StopIteration extends Error {}\n class RecoverableStopIteration extends StopIteration {}\n class TraitTone extends WasmProxy {\n  constructor(double_array) {\n   super(MOD._wasm_tbskmodem_TraitTone());\n  }\n }\n class SieTone extends WasmProxy {\n  constructor(poinsts, cycle) {\n   let _cycle = set_default(cycle, 1);\n   super(MOD._wasm_tbskmodemm_SinTone(points, _cycle));\n  }\n }\n class XPskSinTone extends WasmProxy {\n  constructor(poinsts, cycle, div) {\n   let _cycle = set_default(cycle, 1);\n   let _div = set_default(div, 8);\n   super(MOD._wasm_tbskmodem_XPskSinTone(poinsts, _cycle, _div));\n  }\n }\n class CoffPreamble extends WasmProxy {\n  constructor(tone, threshold, cycle) {\n   let _threshold = set_default(threshold, 1);\n   let _cycle = set_default(cycle, 4);\n   super(MOD._wasm_tbskmodem_CoffPreamble(tone._wasm_instance, _threshold, _cycle));\n  }\n }\n class PassDecoder {\n  reset() {}\n  put(data) {\n   return data;\n  }\n }\n class Utf8Decoder {\n  constructor() {\n   this._decoder = new TextDecoder(\"utf8\", {\n    fatal: true\n   });\n   this._q = [];\n   this._tmp = [];\n  }\n  reset() {\n   this._q = [];\n   this._tmp = [];\n  }\n  put(data) {\n   for (let i = 0; i < data.length; i++) {\n    this._q.push(data[i]);\n   }\n   let ret = [];\n   ML: while (this._q.length > 0) {\n    for (var i = 0; i < this._q.length; i++) {\n     try {\n      let inp = new Uint8Array(this._q.slice(0, i + 1));\n      ret.push(this._decoder.decode(inp));\n      this._q = this._q.slice(i + 1);\n      continue ML;\n     } catch (e) {\n      if (i > 8) {\n       ret.push(this._q[0]);\n       this._q = this._q.slice(1);\n       continue ML;\n      }\n     }\n    }\n    break;\n   }\n   if (ret.length > 0) {\n    return ret;\n   }\n   return undefined;\n  }\n }\n class TbskModulator extends WasmProxy {\n  constructor(tone, preamble) {\n   super(MOD._wasm_tbskmodem_TbskModulator(tone._wasm_instance, preamble._wasm_instance));\n  }\n  modulate(src) {\n   var buf = new IntInputIterator();\n   try {\n    if (typeof src == \"string\") {\n     let te = new TextEncoder();\n     buf.puts(te.encode(src));\n    } else {\n     buf.puts(src);\n    }\n    let wi = MOD._wasm_tbskmodem_TbskModulator_Modulate_A(this._wasm_instance, buf._wasm_instance);\n    if (wi == null) {\n     throw new Error();\n    }\n    let out = new DoubleOutputIterator(wi);\n    try {\n     return out.toArray();\n    } finally {\n     out.dispose();\n    }\n   } finally {\n    buf.dispose();\n   }\n  }\n  modulate2AudioBuffer(actx, src, sampleRate) {\n   let f32_array = this.modulate(src);\n   let buf = actx.createBuffer(1, f32_array.length, sampleRate);\n   buf.getChannelData(0).set(f32_array);\n   return buf;\n  }\n }\n class TbskDemodulator extends WasmProxy {\n  constructor(tone, preamble) {\n   super(MOD._wasm_tbskmodem_TbskDemodulator(tone._wasm_instance, preamble._wasm_instance));\n  }\n  _demodulateAsInt(buf) {\n   let r = MOD._wasm_tbskmodem_TbskDemodulator_DemodulateAsInt(this._wasm_instance, buf._wasm_instance);\n   if (r == 0) {\n    return null;\n   }\n   return new IntOutputIterator(r);\n  }\n  demodulate(src, decoder = undefined) {\n   if (decoder == \"utf8\") {\n    decoder = new Utf8Decoder();\n   } else {\n    decoder = new PassDecoder();\n   }\n   let buf = new DoubleInputIterator();\n   try {\n    buf.puts(src);\n    let out = this._demodulateAsInt(buf);\n    if (out == null) {\n     return [];\n    }\n    try {\n     if (decoder) {\n      return decoder.put(out.toArray());\n     } else {\n      return out.toArray();\n     }\n    } finally {\n     out.dispose();\n    }\n   } finally {\n    buf.dispose();\n   }\n  }\n  _demodulateAsInt_B(src) {\n   let r = MOD._wasm_tbskmodem_TbskDemodulator_DemodulateAsInt_B(this._wasm_instance, src._wasm_instance);\n   if (r == 0) {\n    return null;\n   }\n   return new DemodulateResult(r);\n  }\n }\n class DemodulateResult extends WasmProxy {\n  constructor(wasm_instance) {\n   super(wasm_instance);\n  }\n  getType() {\n   return MOD._wasm_tbskmodem_TbskDemodulator_DemodulateResult_GetType(this._wasm_instance);\n  }\n  getOutput() {\n   return new IntOutputIterator(MOD._wasm_tbskmodem_TbskDemodulator_DemodulateResult_GetOutput(this._wasm_instance));\n  }\n  getRecover() {\n   let wi = MOD._wasm_tbskmodem_TbskDemodulator_DemodulateResult_Recover(this._wasm_instance);\n   if (wi == 0) {\n    return null;\n   }\n   return new IntOutputIterator(wi);\n  }\n }\n class TbskListener extends Disposable {\n  constructor(tone, preamble, events = {}, decoder = undefined) {\n   super();\n   if (!(\"onStart\" in events)) {\n    events.onStart = null;\n   }\n   if (!(\"onData\" in events)) {\n    events.onData = null;\n   }\n   if (!(\"onEnd\" in events)) {\n    events.onEnd = null;\n   }\n   let _t = this;\n   this._decoder = decoder == \"utf8\" ? new Utf8Decoder() : new PassDecoder();\n   this._demod = new TbskDemodulator(tone, preamble);\n   this._input_buf = new DoubleInputIterator(true);\n   this._callOnStart = () => {\n    new Promise(resolve => {\n     resolve();\n    }).then(() => {\n     if (events.onStart) {\n      events.onStart();\n     }\n    });\n   };\n   this._callOnData = data => {\n    new Promise(resolve => {\n     resolve();\n    }).then(() => {\n     if (events.onData) {\n      events.onData(data);\n     }\n    });\n   };\n   this._callOnEnd = () => {\n    new Promise(resolve => {\n     resolve();\n    }).then(() => {\n     if (events.onEnd) {\n      events.onEnd();\n     }\n    });\n   };\n  }\n  dispose() {\n   if (this._currentGenerator) {\n    this._currentGenerator.dispose();\n   }\n   this._demod.dispose();\n   this._input_buf.dispose();\n  }\n  push(src) {\n   function* workflow(demod, input_buf, callOnStart, callOnData, callOnEnd, decoder) {\n    decoder.reset();\n    let out_buf = null;\n    let dresult = null;\n    dresult = demod._demodulateAsInt_B(input_buf);\n    yield function() {\n     out_buf.dispose();\n     dresult.dispose();\n     out_buf = null;\n     dresult = null;\n    };\n    if (dresult == null) {\n     console.error(\"input err\");\n     return;\n    }\n    try {\n     switch (dresult.getType()) {\n     case 1:\n      out_buf = dresult.getOutput();\n      break;\n\n     case 2:\n      for (;;) {\n       out_buf = dresult.getRecover();\n       if (out_buf != null) {\n        break;\n       }\n       yield;\n      }\n      break;\n\n     default:\n      console.error(\"unknown type.\");\n      return;\n     }\n    } finally {\n     dresult.dispose();\n     dresult = null;\n    }\n    console.log(\"Signal detected!\");\n    callOnStart();\n    let ra = [];\n    for (;;) {\n     try {\n      for (;;) {\n       let w = out_buf.next();\n       ra.push(w);\n      }\n     } catch (e) {\n      if (e instanceof RecoverableStopIteration) {\n       if (ra.length > 0) {\n        console.log(\"data:\");\n        if (decoder) {\n         let rd = decoder.put(ra);\n         if (rd) {\n          callOnData(rd);\n         }\n        } else {\n         callOnData(ra);\n        }\n        ra = [];\n       }\n       yield;\n       continue;\n      } else if (e instanceof StopIteration) {\n       if (ra.length > 0) {\n        console.log(\"data:\");\n        if (decoder) {\n         let rd = decoder.put(ra);\n         if (rd) {\n          callOnData(rd);\n         }\n        } else {\n         callOnData(ra);\n        }\n        ra = [];\n       }\n       console.log(\"Signal lost!\");\n       callOnEnd();\n      }\n     }\n     out_buf.dispose();\n     out_buf = null;\n     return;\n    }\n   }\n   this._input_buf.puts(src);\n   if (this._currentGenerator == null) {\n    this._currentGenerator = workflow(this._demod, this._input_buf, this._callOnStart, this._callOnData, this._callOnEnd, this._decoder);\n    this._currentGenerator.dispose = this._currentGenerator.next();\n   }\n   if (this._currentGenerator.next().done) {\n    this._currentGenerator = null;\n   }\n  }\n }\n class PcmData extends WasmProxy {\n  constructor(wasm_instance) {\n   super(wasm_instance);\n  }\n  static create(float_data, sample_bits, frame_rate) {\n   let input_src = new DoubleInputIterator();\n   input_src.puts(float_data);\n   return new PcmData(MOD._wasm_tbskmodem_PcmData_2(input_src._wasm_instance, sample_bits, frame_rate));\n  }\n  dump() {\n   let iter = new IntOutputIterator(MOD._wasm_tbskmodem_PcmData_Dump(this._wasm_instance));\n   return new Uint8Array(iter.toArray());\n  }\n }\n MOD.tbskmodem = {\n  getPointerHolderSize: function() {\n   return MOD._wasm_tbskmodem_PointerHolder_Size();\n  },\n  Utf8Decoder: Utf8Decoder,\n  WasmProxy: WasmProxy,\n  StopIteration: StopIteration,\n  IntInputIterator: IntInputIterator,\n  DoubleInputIterator: DoubleInputIterator,\n  IntOutputIterator: IntOutputIterator,\n  DoubleOutputIterator: DoubleOutputIterator,\n  TraitTone: TraitTone,\n  SieTone: SieTone,\n  XPskSinTone: XPskSinTone,\n  CoffPreamble: CoffPreamble,\n  TbskModulator: TbskModulator,\n  TbskDemodulator: TbskDemodulator,\n  TbskListener: TbskListener,\n  PcmData: PcmData\n };\n console.log(\"tbskmodem initialized.\", this._instance);\n return this._instance;\n}\n\nfunction ___assert_fail(condition, filename, line, func) {\n abort(\"Assertion failed: \" + UTF8ToString(condition) + \", at: \" + [ filename ? UTF8ToString(filename) : \"unknown filename\", line, func ? UTF8ToString(func) : \"unknown function\" ]);\n}\n\nfunction _abort() {\n abort(\"\");\n}\n\nfunction _emscripten_memcpy_big(dest, src, num) {\n HEAPU8.copyWithin(dest, src, src + num);\n}\n\nfunction abortOnCannotGrowMemory(requestedSize) {\n abort(\"OOM\");\n}\n\nfunction _emscripten_resize_heap(requestedSize) {\n var oldSize = HEAPU8.length;\n requestedSize = requestedSize >>> 0;\n abortOnCannotGrowMemory(requestedSize);\n}\n\nvar asmLibraryArg = {\n \"TBSKmodem_api_load_\": _TBSKmodem_api_load_,\n \"__assert_fail\": ___assert_fail,\n \"abort\": _abort,\n \"emscripten_memcpy_big\": _emscripten_memcpy_big,\n \"emscripten_resize_heap\": _emscripten_resize_heap\n};\n\nvar asm = createWasm();\n\nvar ___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = function() {\n return (___wasm_call_ctors = Module[\"___wasm_call_ctors\"] = Module[\"asm\"][\"__wasm_call_ctors\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_VERSION = Module[\"_wasm_tbskmodem_VERSION\"] = function() {\n return (_wasm_tbskmodem_VERSION = Module[\"_wasm_tbskmodem_VERSION\"] = Module[\"asm\"][\"wasm_tbskmodem_VERSION\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_malloc = Module[\"_wasm_tbskmodem_malloc\"] = function() {\n return (_wasm_tbskmodem_malloc = Module[\"_wasm_tbskmodem_malloc\"] = Module[\"asm\"][\"wasm_tbskmodem_malloc\"]).apply(null, arguments);\n};\n\nvar _malloc = Module[\"_malloc\"] = function() {\n return (_malloc = Module[\"_malloc\"] = Module[\"asm\"][\"malloc\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_free = Module[\"_wasm_tbskmodem_free\"] = function() {\n return (_wasm_tbskmodem_free = Module[\"_wasm_tbskmodem_free\"] = Module[\"asm\"][\"wasm_tbskmodem_free\"]).apply(null, arguments);\n};\n\nvar _free = Module[\"_free\"] = function() {\n return (_free = Module[\"_free\"] = Module[\"asm\"][\"free\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_putInt = Module[\"_wasm_tbskmodem_putInt\"] = function() {\n return (_wasm_tbskmodem_putInt = Module[\"_wasm_tbskmodem_putInt\"] = Module[\"asm\"][\"wasm_tbskmodem_putInt\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_getInt = Module[\"_wasm_tbskmodem_getInt\"] = function() {\n return (_wasm_tbskmodem_getInt = Module[\"_wasm_tbskmodem_getInt\"] = Module[\"asm\"][\"wasm_tbskmodem_getInt\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_PointerHolder_Size = Module[\"_wasm_tbskmodem_PointerHolder_Size\"] = function() {\n return (_wasm_tbskmodem_PointerHolder_Size = Module[\"_wasm_tbskmodem_PointerHolder_Size\"] = Module[\"asm\"][\"wasm_tbskmodem_PointerHolder_Size\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_Dispose = Module[\"_wasm_tbskmodem_Dispose\"] = function() {\n return (_wasm_tbskmodem_Dispose = Module[\"_wasm_tbskmodem_Dispose\"] = Module[\"asm\"][\"wasm_tbskmodem_Dispose\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_IntInputIterator = Module[\"_wasm_tbskmodem_IntInputIterator\"] = function() {\n return (_wasm_tbskmodem_IntInputIterator = Module[\"_wasm_tbskmodem_IntInputIterator\"] = Module[\"asm\"][\"wasm_tbskmodem_IntInputIterator\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_IntInputIterator_put = Module[\"_wasm_tbskmodem_IntInputIterator_put\"] = function() {\n return (_wasm_tbskmodem_IntInputIterator_put = Module[\"_wasm_tbskmodem_IntInputIterator_put\"] = Module[\"asm\"][\"wasm_tbskmodem_IntInputIterator_put\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_DoubleInputIterator = Module[\"_wasm_tbskmodem_DoubleInputIterator\"] = function() {\n return (_wasm_tbskmodem_DoubleInputIterator = Module[\"_wasm_tbskmodem_DoubleInputIterator\"] = Module[\"asm\"][\"wasm_tbskmodem_DoubleInputIterator\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_DoubleInputIterator_put = Module[\"_wasm_tbskmodem_DoubleInputIterator_put\"] = function() {\n return (_wasm_tbskmodem_DoubleInputIterator_put = Module[\"_wasm_tbskmodem_DoubleInputIterator_put\"] = Module[\"asm\"][\"wasm_tbskmodem_DoubleInputIterator_put\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_IntOutputIterator_hasNext = Module[\"_wasm_tbskmodem_IntOutputIterator_hasNext\"] = function() {\n return (_wasm_tbskmodem_IntOutputIterator_hasNext = Module[\"_wasm_tbskmodem_IntOutputIterator_hasNext\"] = Module[\"asm\"][\"wasm_tbskmodem_IntOutputIterator_hasNext\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_IntOutputIterator_lastNext = Module[\"_wasm_tbskmodem_IntOutputIterator_lastNext\"] = function() {\n return (_wasm_tbskmodem_IntOutputIterator_lastNext = Module[\"_wasm_tbskmodem_IntOutputIterator_lastNext\"] = Module[\"asm\"][\"wasm_tbskmodem_IntOutputIterator_lastNext\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_DoubleOutputIterator_hasNext = Module[\"_wasm_tbskmodem_DoubleOutputIterator_hasNext\"] = function() {\n return (_wasm_tbskmodem_DoubleOutputIterator_hasNext = Module[\"_wasm_tbskmodem_DoubleOutputIterator_hasNext\"] = Module[\"asm\"][\"wasm_tbskmodem_DoubleOutputIterator_hasNext\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_DoubleOutputIterator_lastNext = Module[\"_wasm_tbskmodem_DoubleOutputIterator_lastNext\"] = function() {\n return (_wasm_tbskmodem_DoubleOutputIterator_lastNext = Module[\"_wasm_tbskmodem_DoubleOutputIterator_lastNext\"] = Module[\"asm\"][\"wasm_tbskmodem_DoubleOutputIterator_lastNext\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_TraitTone = Module[\"_wasm_tbskmodem_TraitTone\"] = function() {\n return (_wasm_tbskmodem_TraitTone = Module[\"_wasm_tbskmodem_TraitTone\"] = Module[\"asm\"][\"wasm_tbskmodem_TraitTone\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_SinTone = Module[\"_wasm_tbskmodem_SinTone\"] = function() {\n return (_wasm_tbskmodem_SinTone = Module[\"_wasm_tbskmodem_SinTone\"] = Module[\"asm\"][\"wasm_tbskmodem_SinTone\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_XPskSinTone = Module[\"_wasm_tbskmodem_XPskSinTone\"] = function() {\n return (_wasm_tbskmodem_XPskSinTone = Module[\"_wasm_tbskmodem_XPskSinTone\"] = Module[\"asm\"][\"wasm_tbskmodem_XPskSinTone\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_CoffPreamble = Module[\"_wasm_tbskmodem_CoffPreamble\"] = function() {\n return (_wasm_tbskmodem_CoffPreamble = Module[\"_wasm_tbskmodem_CoffPreamble\"] = Module[\"asm\"][\"wasm_tbskmodem_CoffPreamble\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_TbskModulator = Module[\"_wasm_tbskmodem_TbskModulator\"] = function() {\n return (_wasm_tbskmodem_TbskModulator = Module[\"_wasm_tbskmodem_TbskModulator\"] = Module[\"asm\"][\"wasm_tbskmodem_TbskModulator\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_TbskModulator_Modulate_A = Module[\"_wasm_tbskmodem_TbskModulator_Modulate_A\"] = function() {\n return (_wasm_tbskmodem_TbskModulator_Modulate_A = Module[\"_wasm_tbskmodem_TbskModulator_Modulate_A\"] = Module[\"asm\"][\"wasm_tbskmodem_TbskModulator_Modulate_A\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_TbskDemodulator = Module[\"_wasm_tbskmodem_TbskDemodulator\"] = function() {\n return (_wasm_tbskmodem_TbskDemodulator = Module[\"_wasm_tbskmodem_TbskDemodulator\"] = Module[\"asm\"][\"wasm_tbskmodem_TbskDemodulator\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_TbskDemodulator_DemodulateAsInt = Module[\"_wasm_tbskmodem_TbskDemodulator_DemodulateAsInt\"] = function() {\n return (_wasm_tbskmodem_TbskDemodulator_DemodulateAsInt = Module[\"_wasm_tbskmodem_TbskDemodulator_DemodulateAsInt\"] = Module[\"asm\"][\"wasm_tbskmodem_TbskDemodulator_DemodulateAsInt\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_TbskDemodulator_DemodulateAsInt_B = Module[\"_wasm_tbskmodem_TbskDemodulator_DemodulateAsInt_B\"] = function() {\n return (_wasm_tbskmodem_TbskDemodulator_DemodulateAsInt_B = Module[\"_wasm_tbskmodem_TbskDemodulator_DemodulateAsInt_B\"] = Module[\"asm\"][\"wasm_tbskmodem_TbskDemodulator_DemodulateAsInt_B\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_TbskDemodulator_DemodulateResult_GetType = Module[\"_wasm_tbskmodem_TbskDemodulator_DemodulateResult_GetType\"] = function() {\n return (_wasm_tbskmodem_TbskDemodulator_DemodulateResult_GetType = Module[\"_wasm_tbskmodem_TbskDemodulator_DemodulateResult_GetType\"] = Module[\"asm\"][\"wasm_tbskmodem_TbskDemodulator_DemodulateResult_GetType\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_TbskDemodulator_DemodulateResult_GetOutput = Module[\"_wasm_tbskmodem_TbskDemodulator_DemodulateResult_GetOutput\"] = function() {\n return (_wasm_tbskmodem_TbskDemodulator_DemodulateResult_GetOutput = Module[\"_wasm_tbskmodem_TbskDemodulator_DemodulateResult_GetOutput\"] = Module[\"asm\"][\"wasm_tbskmodem_TbskDemodulator_DemodulateResult_GetOutput\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_TbskDemodulator_DemodulateResult_Recover = Module[\"_wasm_tbskmodem_TbskDemodulator_DemodulateResult_Recover\"] = function() {\n return (_wasm_tbskmodem_TbskDemodulator_DemodulateResult_Recover = Module[\"_wasm_tbskmodem_TbskDemodulator_DemodulateResult_Recover\"] = Module[\"asm\"][\"wasm_tbskmodem_TbskDemodulator_DemodulateResult_Recover\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_PcmData_1 = Module[\"_wasm_tbskmodem_PcmData_1\"] = function() {\n return (_wasm_tbskmodem_PcmData_1 = Module[\"_wasm_tbskmodem_PcmData_1\"] = Module[\"asm\"][\"wasm_tbskmodem_PcmData_1\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_PcmData_2 = Module[\"_wasm_tbskmodem_PcmData_2\"] = function() {\n return (_wasm_tbskmodem_PcmData_2 = Module[\"_wasm_tbskmodem_PcmData_2\"] = Module[\"asm\"][\"wasm_tbskmodem_PcmData_2\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_PcmData_GetSampleBits = Module[\"_wasm_tbskmodem_PcmData_GetSampleBits\"] = function() {\n return (_wasm_tbskmodem_PcmData_GetSampleBits = Module[\"_wasm_tbskmodem_PcmData_GetSampleBits\"] = Module[\"asm\"][\"wasm_tbskmodem_PcmData_GetSampleBits\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_PcmData_GetFramerate = Module[\"_wasm_tbskmodem_PcmData_GetFramerate\"] = function() {\n return (_wasm_tbskmodem_PcmData_GetFramerate = Module[\"_wasm_tbskmodem_PcmData_GetFramerate\"] = Module[\"asm\"][\"wasm_tbskmodem_PcmData_GetFramerate\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_PcmData_GetByteslen = Module[\"_wasm_tbskmodem_PcmData_GetByteslen\"] = function() {\n return (_wasm_tbskmodem_PcmData_GetByteslen = Module[\"_wasm_tbskmodem_PcmData_GetByteslen\"] = Module[\"asm\"][\"wasm_tbskmodem_PcmData_GetByteslen\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_PcmData_DataAsFloat = Module[\"_wasm_tbskmodem_PcmData_DataAsFloat\"] = function() {\n return (_wasm_tbskmodem_PcmData_DataAsFloat = Module[\"_wasm_tbskmodem_PcmData_DataAsFloat\"] = Module[\"asm\"][\"wasm_tbskmodem_PcmData_DataAsFloat\"]).apply(null, arguments);\n};\n\nvar _wasm_tbskmodem_PcmData_Dump = Module[\"_wasm_tbskmodem_PcmData_Dump\"] = function() {\n return (_wasm_tbskmodem_PcmData_Dump = Module[\"_wasm_tbskmodem_PcmData_Dump\"] = Module[\"asm\"][\"wasm_tbskmodem_PcmData_Dump\"]).apply(null, arguments);\n};\n\nvar _load_apis = Module[\"_load_apis\"] = function() {\n return (_load_apis = Module[\"_load_apis\"] = Module[\"asm\"][\"load_apis\"]).apply(null, arguments);\n};\n\nvar ___errno_location = Module[\"___errno_location\"] = function() {\n return (___errno_location = Module[\"___errno_location\"] = Module[\"asm\"][\"__errno_location\"]).apply(null, arguments);\n};\n\nvar ___trap = Module[\"___trap\"] = function() {\n return (___trap = Module[\"___trap\"] = Module[\"asm\"][\"__trap\"]).apply(null, arguments);\n};\n\nvar _setThrew = Module[\"_setThrew\"] = function() {\n return (_setThrew = Module[\"_setThrew\"] = Module[\"asm\"][\"setThrew\"]).apply(null, arguments);\n};\n\nvar stackSave = Module[\"stackSave\"] = function() {\n return (stackSave = Module[\"stackSave\"] = Module[\"asm\"][\"stackSave\"]).apply(null, arguments);\n};\n\nvar stackRestore = Module[\"stackRestore\"] = function() {\n return (stackRestore = Module[\"stackRestore\"] = Module[\"asm\"][\"stackRestore\"]).apply(null, arguments);\n};\n\nvar stackAlloc = Module[\"stackAlloc\"] = function() {\n return (stackAlloc = Module[\"stackAlloc\"] = Module[\"asm\"][\"stackAlloc\"]).apply(null, arguments);\n};\n\nvar dynCall_ji = Module[\"dynCall_ji\"] = function() {\n return (dynCall_ji = Module[\"dynCall_ji\"] = Module[\"asm\"][\"dynCall_ji\"]).apply(null, arguments);\n};\n\nvar calledRun;\n\ndependenciesFulfilled = function runCaller() {\n if (!calledRun) run();\n if (!calledRun) dependenciesFulfilled = runCaller;\n};\n\nfunction run(args) {\n args = args || arguments_;\n if (runDependencies > 0) {\n  return;\n }\n preRun();\n if (runDependencies > 0) {\n  return;\n }\n function doRun() {\n  if (calledRun) return;\n  calledRun = true;\n  Module[\"calledRun\"] = true;\n  if (ABORT) return;\n  initRuntime();\n  readyPromiseResolve(Module);\n  if (Module[\"onRuntimeInitialized\"]) Module[\"onRuntimeInitialized\"]();\n  postRun();\n }\n if (Module[\"setStatus\"]) {\n  Module[\"setStatus\"](\"Running...\");\n  setTimeout(function() {\n   setTimeout(function() {\n    Module[\"setStatus\"](\"\");\n   }, 1);\n   doRun();\n  }, 1);\n } else {\n  doRun();\n }\n}\n\nif (Module[\"preInit\"]) {\n if (typeof Module[\"preInit\"] == \"function\") Module[\"preInit\"] = [ Module[\"preInit\"] ];\n while (Module[\"preInit\"].length > 0) {\n  Module[\"preInit\"].pop()();\n }\n}\n\nrun();\n\n\n  return Module.ready\n}\n);\n})();\nif (true)\n  module.exports = Module;\nelse {}\n\n\n//# sourceURL=webpack://tbskmodem-js/./src/wasm/tbskmodem_wasm_mod.js?");

/***/ }),

/***/ "./src/wasm/tbskmodem_wasm_mod.wasm":
/*!******************************************!*\
  !*** ./src/wasm/tbskmodem_wasm_mod.wasm ***!
  \******************************************/
/***/ ((module) => {

"use strict";
eval("module.exports = \"data:application/wasm;base64,\";\n\n//# sourceURL=webpack://tbskmodem-js/./src/wasm/tbskmodem_wasm_mod.wasm?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/tbskmodem.js");
/******/ 	
/******/ })()
;